# lib/tasks/seo_checker.rake
namespace :seo_checker do
  desc "Verifica a posi√ß√£o de todos os TrackedKeywords no Google e guarda o hist√≥rico"
  task check_rankings: :environment do
    puts "ü§ñ Iniciando o rob√¥ de verifica√ß√£o de SEO..."

    tracked_keywords = TrackedKeyword.all

    if tracked_keywords.empty?
      puts "‚ÑπÔ∏è Nenhuma palavra-chave para verificar. Adicione algumas em http://localhost:3000/tracked_keywords"
      next
    end

    puts "üîé Encontradas #{tracked_keywords.count} palavras-chave para verificar."

    tracked_keywords.each do |tk|
      puts "--- Verificando '#{tk.keyword}' para o dom√≠nio '#{tk.domain}'..."

      # Configura a busca na SerpApi
      search = SerpApiSearch.new(
        q: tk.keyword,
        engine: 'google',
        api_key: Rails.application.credentials.serpapi[:api_key]
      )
      
      results = search.get_hash

      # Procura o nosso dom√≠nio nos resultados e encontra a posi√ß√£o
      found_position = nil
      if results[:organic_results]
        results[:organic_results].each_with_index do |result, index|
          if result[:link] && result[:link].include?(tk.domain)
            found_position = index + 1 # A posi√ß√£o √© o √≠ndice do array + 1
            break # Para o loop assim que encontrar a primeira ocorr√™ncia
          end
        end
      end

      if found_position
        # Guarda o resultado no hist√≥rico
        RankingHistory.create!(
          tracked_keyword: tk,
          position: found_position,
          checked_on: Date.today
        )
        puts "‚úÖ Posi√ß√£o encontrada: #{found_position}. Hist√≥rico guardado."
      else
        puts "‚ùå Dom√≠nio n√£o encontrado nos 100 primeiros resultados para esta palavra-chave."
      end
    end

    puts "üèÜ Verifica√ß√£o conclu√≠da!"
  end
end